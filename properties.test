<?php
// $Id$

/**
 * @file
 * Contains tests for the properties.module
 */


/**
 * Tests for fields integration.
 */
class PropertiesTestCase extends DrupalWebTestCase {
  /**
   * Implementation of getInfo().
   */
  public static function getInfo() {
    return array
    (
      'name' => t('Properties creation'),
      'description' => t('Tests properties field type.'),
      'group' => t('Properties'),
    );
  }

  /**
   * Implementation of setUp().
   */
  function setUp() {
    parent::setUp('properties');
  }

  function testPropertyFieldCreation() {
    $admin = $this->drupalCreateUser(array('administer nodes', 'administer content types', 'create page content'));
    $this->drupalLogin($admin);

    // Create a new field.
    $edit = array(
      'fields[_add_new_field][label]' => $label = $this->randomName(),
      'fields[_add_new_field][field_name]' => $name = strtolower($this->randomName()),
      'fields[_add_new_field][type]' => 'properties',
      'fields[_add_new_field][widget_type]' => 'properties_table',
    );
    $this->drupalPost('admin/structure/types/manage/page/fields', $edit, t('Save'));
    $this->drupalPost(NULL, array(), t('Save field settings'));
    $this->drupalPost(NULL, array(), t('Save settings'));

    // Create node.
    $node = array(
      'title' => $title = $this->randomName(10),
      'field_' . $name . '[und][0][attribute]' => $this->randomName(20),
      'field_' . $name . '[und][0][value]' => $this->randomName(20),
      'field_' . $name . '[und][0][category]' => $this->randomName(15),

    );
    $this->drupalPost('node/add/page', $node, t('Save'));
    $this->assertText($node['field_' . $name . '[und][0][attribute]'], t('Content of new field is displayed.'));
    $this->assertText($node['field_' . $name . '[und][0][value]'], t('Content of new field is displayed.'));
    $this->assertText($node['field_' . $name . '[und][0][category]'], t('Content of new field is displayed.'));

  }
}


/**
 * Tests for fields integration.
 */
class PropertiesAdministrationTestCase extends DrupalWebTestCase {
  /**
   * Implementation of getInfo().
   */
  public static function getInfo() {
    return array
    (
      'name' => t('Properties administration'),
      'description' => t('Category and Attribute administration tests'),
      'group' => t('Properties'),
    );
  }

  public function setUp() {
    parent::setUp('properties', 'properties_sql');
  }

  public function testCreating()
  {
    $admin = $this->drupalCreateUser(array('administer properties categories', 'administer properties attributes'));
    $this->drupalLogin($admin);

    // Create 5 properties.
    $attributes = array();
    for ($i = 0; $i < 5; $i++) {
      $attributes[$i]['name'] = strtolower($this->randomName(8));
      $attributes[$i]['label'] = $this->randomName(20);
      $this->drupalPost('admin/config/content/properties/attributes/add', $attributes[$i], t('Add'));
      $this->assertText(t('Attribute created.'));
    }

    // Create a category.
    $category = array(
      'name' => strtolower($this->randomName(8)),
      'label' => $this->randomName(20),
      'attributes[0][attribute]' => $attributes[3]['name'],
    );

    // Add another attribute.
    $this->drupalPost('admin/config/content/properties/categories/add', $category, t('Add another attribute'));

    // Assert that label has been inserted.
    $this->assertText($attributes[3]['label']);

    // And another one.
    $next_attribute = array(
      'attributes[1][attribute]' => $attributes[1]['name'],
    );
    $this->drupalPost(NULL, $next_attribute, t('Add another attribute'));

    // Assert that label has been inserted.
    $this->assertText($attributes[1]['label']);

    // Add a new attribute, try to submit.
    $new_attribute = array(
      'attributes[2][attribute]' => $name = strtolower($this->randomName()),
    );
    $this->drupalPost(NULL, $new_attribute, t('Add'));
    $this->assertText(t('Attribute @name does not exist, a label must be provided to create it.', array('@name' => $name)));

    $label = array(
      'attributes[2][label]' => $label = $this->randomName(20),
    );
    $this->drupalPost(NULL, $label, t('Add'));
    $this->assertText(t('Category created.'));

    // Verify that new attribute has been created.
    $this->drupalGet('admin/config/content/properties/attributes');
    $this->assertText($label);
    $this->assertText($name);
  }
}