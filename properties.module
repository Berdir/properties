<?php

// $Id$

/**
 * Implements hook_permission().
 */
function properties_permission() {
  return array(
    'administer properties attributes' => array(
      'label' => t('Administer attributes'),
      'description' => t('Allows to create new, edit existing and delete attributes.'),
    ),
    'administer properties categories' => array(
      'label' => t('Administer categories'),
      'description' => t('Allows to create new, edit existing and delete categories.'),
    ),
    'add properties categories to content' => array(
      'label' => t('Add categories to content'),
      'description' => t('Allows to add existing categories to content.'),
    ),
    'add properties attributes to content' => array(
      'label' => t('Add attributes to content'),
      'description' => t('Allows to add existing attributes to content.'),
    )
  );
}

/**
 * Implements hook_menu().
 */
function properties_menu() {
  $items['admin/config/content/properties'] = array(
    'title' => 'Properties',
    'description' => 'Administer categories and attributes',
    'access callback' => 'properties_admin_access',
    'page callback' => 'properties_admin_attributes_list',
    'file' => 'properties.admin.inc',
  );

  $items['admin/config/content/properties/attributes'] = array(
    'title' => 'Attributes',
    'page callback' => 'properties_admin_attributes_list',
    'file' => 'properties.admin.inc',
    'access callback' => 'properties_admin_access',
    'access arguments' => array('attributes'),
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );

  $items['admin/config/content/properties/attributes/list'] = array(
    'title' => 'List',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -20,
  );

  $items['admin/config/content/properties/attributes/add'] = array(
    'title' => 'Add attribute',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('properties_admin_attributes_form'),
    'file' => 'properties.admin.inc',
    'access callback' => 'properties_admin_access',
    'access arguments' => array('attributes'),
    'type' => MENU_LOCAL_ACTION,
  );

  $items['admin/config/content/properties/attributes/edit/%properties_attribute'] = array(
    'title' => 'Edit attribute',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('properties_admin_attributes_form', 6),
    'file' => 'properties.admin.inc',
    'access callback' => 'properties_admin_access',
    'access arguments' => array('attributes'),
    'type' => MENU_LOCAL_TASK,
    'weight' => -10,
  );

  $items['admin/config/content/properties/attributes/delete/%properties_attribute'] = array(
    'title' => 'Delete attribute',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('properties_admin_attributes_delete', 6),
    'file' => 'properties.admin.inc',
    'access callback' => 'properties_admin_access',
    'access arguments' => array('attributes'),
    'type' => MENU_LOCAL_TASK,
  );

  $items['admin/config/content/properties/categories'] = array(
    'title' => 'Categories',
    'page callback' => 'properties_admin_categories_list',
    'file' => 'properties.admin.inc',
    'access callback' => 'properties_admin_access',
    'access arguments' => array('categories'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 10,
  );

  $items['admin/config/content/properties/categories/list'] = array(
    'title' => 'List',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -20,
  );

  $items['admin/config/content/properties/categories/add'] = array(
    'title' => 'Add category',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('properties_admin_categories_form'),
    'file' => 'properties.admin.inc',
    'access callback' => 'properties_admin_access',
    'access arguments' => array('attributes'),
    'type' => MENU_LOCAL_ACTION,
  );

  $items['admin/config/content/properties/categories/edit/%properties_category'] = array(
    'title' => 'Edit category',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('properties_admin_categories_form', 6),
    'file' => 'properties.admin.inc',
    'access callback' => 'properties_admin_access',
    'access arguments' => array('categories'),
    'type' => MENU_LOCAL_TASK,
    'weight' => -10,
  );

  $items['admin/config/content/properties/categories/delete/%properties_category'] = array(
    'title' => 'Delete category',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('properties_admin_categories_delete', 6),
    'file' => 'properties.admin.inc',
    'access callback' => 'properties_admin_access',
    'access arguments' => array('categories'),
    'type' => MENU_LOCAL_TASK,
  );

  $items['properties_autocomplete/%'] = array(
    'title' => 'Properties autocomplete',
    'type' => MENU_CALLBACK,
    'page callback' => 'properties_autocomplete_js',
    'page arguments' => array(1, 2),
    'access callback' => TRUE,
  );

  return $items;
}

/**
 * Page callback for autocomplete suggestions.
 */
function properties_autocomplete_js($type, $string = NULL) {
  $function = 'properties_' . $type . '_load_paging';
  if (!function_exists($function)) {
    return;
  }
  $suggestions = $function(10, array('search' => $string));

  $json_suggestions = array();
  foreach ($suggestions as $suggestion) {
    $json_suggestions[$suggestion->name] = t('@name (@label)', array('@name' => $suggestion->name, '@label' => $suggestion->label));
  }
  drupal_json_output((object) $json_suggestions);
}

/**
 * Implements hook_theme().
 */
function properties_theme() {
  return array(
    'properties_admin_categories_attributes_form' => array(
      'render element' => 'element',
      'file' => 'properties.admin.inc',
    ),
    'properties_properties_form' => array(
      'render element' => 'element',
      'template' => 'properties-properties-form',
    ),
  );
}

/**
 * Check access to an administration page.
 *
 * @param $type
 *   Either categories or attributes.
 *
 * @return
 *   TRUE if access is allowed.
 */
function properties_admin_access($type = NULL) {
  if (empty($type)) {
    return user_access('administer properties attributes') || user_access('administer properties categories');
  }
  else {
    return user_access('administer properties ' . $type);
  }
}

/**
 * Implements hook_field_info().
 */
function properties_field_info() {
  return array(
    'properties' => array(
      'label' => t('Dynamic Properties'),
      'description' => t('This field stores a dynamic amount of properties in the database.'),
      'settings' => array(),
      'instance_settings' => array(),
      'default_widget' => 'properties_table',
      'default_formatter' => 'properties_formatter',
    ),
  );
}

/**
 * Implements hook_field_schema().
 */
function properties_field_schema($field) {
  $columns = array(
    'attribute' => array(
      'type' => 'varchar',
      'length' => 255,
      'not null' => TRUE,
    ),
    'value' => array(
      'type' => 'varchar',
      'length' => 255,
      'not null' => TRUE,
    ),
    'category' => array(
      'type' => 'varchar',
      'length' => 255,
      'not null' => TRUE,
    ),
  );

  return array(
    'columns' => $columns,
    'indexes' => array(
      'attribute' => array('attribute'),
      'category' => array('category'),
    ),
  );
}

/**
 * Implements hook_field_validate().
 */
function properties_field_validate($entity_type, $entity, $field, $instance, $langcode, $items, &$errors) {

}

/**
 * Implements hook_field_is_empty().
 */
function properties_field_is_empty($item, $field) {
  return empty($item['attribute']);
}

/**
 * Implements hook_field_formatter_info().
 */
function properties_field_formatter_info() {
  return array(
    'properties_formatter' => array(
      'label' => t('Default'),
      'field types' => array('properties'),
    ),
  );
}

/**
 * Implements hook_field_widget_info().
 */
function properties_field_widget_info() {
  return array(
    'properties_table' => array(
      'label' => t('Properties table'),
      'field types' => array('properties'),
      'settings' => array(),
      'behaviors' => array(
        'multiple values' => FIELD_BEHAVIOR_CUSTOM,
        'default value' => FIELD_BEHAVIOR_NONE,
      ),
    ),
  );
}

/**
 * Returns an empty attribute object.
 */
function properties_empty_attribute() {
  return (object) array(
    'label' => '',
    'name' => '',
  );
}

/**
 * Implements hook_field_widet_form().
 */
function properties_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  $elements = array();

  drupal_add_css(drupal_get_path('module', 'properties') . '/properties.css');

  if (empty($form_state[$field['field_name']])) {
    $form_state[$field['field_name']]['categories'] = array();
  }
  $categories = &$form_state[$field['field_name']]['categories'];

  // Retrieve any values set in $form_state, as will be the case during AJAX
  // rebuilds of this form.
  if (isset($form_state['values'][$field['field_name']][$langcode]['listing'])) {
    foreach ($form_state['values'][$field['field_name']][$langcode]['listing'] as $category) {
      $categories[$category['name']]['_weight'] = $category['_weight'];
      $categories[$category['name']]['properties'] = $category['properties'];
    }
    unset($form_state['values'][$field['field_name']][$langcode]['listing']);
  }

  // Check if we need to load a new category.
  if (!empty($form_state[$field['field_name']]['new_category'])) {
    $new_category = $form_state[$field['field_name']]['new_category'];
    $categories[$new_category->name] = array(
      '_weight' => count($categories),
      'category' => $new_category,
      'properties' => array(),
    );
    foreach ($new_category->attributes as $property) {
      $categories[$new_category->name]['properties'][] = array(
        'attribute' => $property->name,
        'category' => $form_state[$field['field_name']]['new_category']->name,
        'value' => '',
        '_weight' => count($categories[$new_category->name]['properties']),
      );
    }
    unset($form_state[$field['field_name']]['new_category']);
  }

  uasort($categories, '_field_sort_items_helper');
  $category_list = array();
  foreach ($categories as $category_name => $item) {
    $category_list[$item['category']->name] = $item['category']->label;
  }

  $elements['listing'] = array();
  foreach ($categories as $category_name => $category) {
    $elements['listing'][$category_name]['#label'] = $category['category']->label;
    // Only used to trick tabledrag.js.
    $elements['listing'][$category_name]['category'] = array(
      '#type' => 'hidden',
      '#value' => '',
    );

    $elements['listing'][$category_name]['name'] = array(
      '#type' => 'hidden',
      '#value' => $category['category']->name,
    );

    $elements['listing'][$category_name]['_weight'] = array(
      '#type' => 'weight',
      '#title' => t('Weight for category @category', array('@category' => $category['category']->label)),
      '#title_display' => 'invisible',
      '#default_value' => $category['_weight'],
      '#weight' => 100,
    );

    usort($category['properties'], '_field_sort_items_helper');
    foreach ($category['properties'] as $delta => $property) {
      $element = array();
      $element['category'] = array(
        '#type' => 'select',
        '#default_value' => $property['category'],
        '#options' => $category_list,
      );
      $element['attribute'] = array(
        '#type' => 'textfield',
        '#default_value' => $property['attribute'],
        '#autocomplete_path' => 'properties_autocomplete/attribute',
        '#maxlength' => 255,
        '#size' => 32,
        '#ajax' => array(
          'callback' => 'properties_admin_update_label_js',
          'wrapper' => 'attributes-wrapper',
          'effect' => 'fade',
        ),
      );
      $element['label'] = array(
        '#markup' => !empty($property['attribute']) ? $category['category']->attributes[$property['attribute']]->label : '',
      );

      $element['value'] = array(
        '#type' => 'textfield',
        '#default_value' => $property['value'],
        '#maxlength' => 255,
      );

      $element['_weight'] = array(
        '#type' => 'weight',
        '#title' => t('Weight for row @number', array('@number' => $delta)),
        '#title_display' => 'invisible',
        '#default_value' => $property['_weight'],
        '#weight' => 100,
      );
      $elements['listing'][$category_name]['properties'][$delta] = $element;
    }
  }

  $id = 'properties-' . drupal_html_id($field['field_name']) . '-wrapper';

  $elements += array(
    '#type' => 'fieldset',
    '#theme' => 'properties_properties_form',
    '#title' => t('Properties'),
    '#description' => t('Add properties to this content. Start by adding categories to it.'),
    '#prefix' => '<div id="' . $id . '">',
    '#suffix' => '</div>',
    '#max_delta' => $delta,
    '#tree' => TRUE,
  );
  $elements['new_category'] = array(
    '#type' => 'textfield',
    '#default_value' => '',
    '#autocomplete_path' => 'properties_autocomplete/category',
    '#maxlength' => 255,
    '#size' => 32,
  );
  $elements['add_more'] = array(
    '#type' => 'submit',
    '#value' => t('Add category'),
    '#attributes' => array('class' => array('field-add-more-submit')),
    '#limit_validation_errors' => array(array($field['field_name'], $langcode)),
    '#submit' => array('properties_widget_add_category_submit'),
    '#ajax' => array(
      'callback' => 'properties_widget_add_category_js',
      'wrapper' => $id,
      'effect' => 'fade',
    ),
  );
  return $elements;
}

function properties_widget_add_category_submit($form, &$form_state) {
  $field_name = $form_state['triggering_element']['#parents'][0];
  $langcode = $form[$field_name]['#language'];
  $values = reset($form_state['values'][$field_name]);

  if (!isset($form_state[$field_name]['categories'][$values['new_category']])) {
    $category = properties_category_load($values['new_category']);
    if (!empty($category)) {
      $form_state[$field_name]['new_category'] = $category;
      form_set_value($form[$field_name][$langcode]['new_category'], '', $form_state);
    }
    else {
      form_set_error($field_name . '][' . $langcode . '][new_category', t('Category empty or invalid.'));
    }
  }
  $form_state['rebuild'] = TRUE;
}

function properties_widget_add_category_js($form, $form_state) {
  $field_name = $form_state['triggering_element']['#parents'][0];
  return $form[$field_name];
}

/**
 * Implements hook_field_formatter_view().
 */
function properties_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();
  $items_by_category = array();
  foreach ($items as $item) {
    if (!isset($items_by_category[$item['category']])) {
      $items_by_category[$item['category']] = array();
    }
    $items_by_category[$item['category']][] = $item;
  }

  $i = 0;
  foreach ($items_by_category as $category => $items_in_category) {
    $element[0][$i++] = array('#markup' => '<h3>' . $category . '</h3>');
    foreach ($items_in_category as $item) {
      $element[0][$i++] = array('#markup' => '<p>' . $item['attribute'] . ': ' . $item['value'] . '</p>');
    }
  }
  return $element;
}

/**
 * Calls an API function.
 *
 * Additional arguments can be passed to the function, these will be forwarded
 * to the API implementation.
 *
 * @param $type
 *   API type, e.g. attribute or category.
 * @param $action
 *   Name of the API function, eg load, save, delete.
 */
function _properties_get_call($type, $action) {
  return variable_get('properties_api', 'properties_sql') . '_properties_' . $type . '_' . $action;
}

/**
 * Save an attribute object.
 *
 * @param $attribute
 *   Attribute object.
 */
function properties_attribute_save($attribute) {
  $function_name = _properties_get_call('attribute', 'save');
  return $function_name($attribute);
}

/**
 * Delete an attribute.
 *
 * @param $attribute
 *   Attribute object.
 */
function properties_attribute_delete($attribute) {
  $function_name = _properties_get_call('attribute', 'delete');
  return $function_name($attribute);
}

/**
 * Load an attribute based on the name.
 *
 * @param $name
 *   Machine readable name of the attribute.
 */
function properties_attribute_load($name) {
  $function_name = _properties_get_call('attribute', 'load');
  return $function_name($name);
}

/**
 * Load multiple attributes based on their names.
 *
 * @param $names
 *   Array of machine readable name of the attributes.
 */
function properties_attribute_load_multiple($names = array()) {
  $function_name = _properties_get_call('attribute', 'load_multiple');
  return $function_name($names);
}

/**
 * Load a paged amount of attributes.
 * @param $per_page
 *   Number of attributes per page.
 */
function properties_attribute_load_paging($per_page, array $options = array()) {
  $function_name = _properties_get_call('attribute', 'load_paging');
  return $function_name($per_page, $options);
}

/**
 * Save an category object.
 *
 * @param $category
 *   Category object.
 */
function properties_category_save($category) {
  foreach ($category->attributes as $delta => $attribute) {
    // New attribute, save it first.
    if (!empty($attribute->new)) {
      properties_attribute_save($attribute);
    }
    // Empty attribute, remove from array.
    if (empty($attribute->name)) {
      unset($category->attributes[$delta]);
    }
  }
  $function_name = _properties_get_call('category', 'save');
  return $function_name($category);
}

/**
 * Delete an category.
 *
 * @param $category
 *   Category object.
 */
function properties_category_delete($category) {
  $function_name = _properties_get_call('category', 'delete');
  return $function_name($category);
}

/**
 * Load an category based on the name.
 *
 * @param $name
 *   Machine readable name of the category.
 */
function properties_category_load($name) {
  $function_name = _properties_get_call('category', 'load');
  return $function_name($name);
}

/**
 * Load multiple categories based on their names.
 *
 * @param $names
 *   Array of machine readable name of the categories.
 */
function properties_category_load_multiple($names = array()) {
  $function_name = _properties_get_call('category', 'load_multiple');
  return $function_name($names);
}

/**
 * Load a paged amount of categories.
 * @param $per_page
 *   Number of categories per page.
 */
function properties_category_load_paging($per_page, array $options = array()) {
  $function_name = _properties_get_call('category', 'load_paging');
  return $function_name($per_page, $options);
}
