<?php
// $Id$

/**
 * Implements hook_field_info().
 */
function properties_field_info() {
  return array(
    'properties' => array(
      'label' => t('Dynamic Properties'),
      'description' => t('This field stores a dynamic amount of properties in the database.'),
      'settings' => array(),
      'instance_settings' => array(),
      'default_widget' => 'properties_table',
      'default_formatter' => 'properties_formatter',
    ),
  );
}

/**
 * Implements hook_field_schema().
 */
function properties_field_schema($field) {
  $columns = array(
    'attribute' => array(
      'type' => 'varchar',
      'length' => 255,
      'not null' => TRUE,
    ),
    'value' => array(
      'type' => 'varchar',
      'length' => 255,
      'not null' => TRUE,
    ),
    'category' => array(
      'type' => 'varchar',
      'length' => 255,
      'not null' => TRUE,
    ),
  );

  return array(
    'columns' => $columns,
    'indexes' => array(
      'attribute' => array('attribute'),
      'category' => array('category'),
    ),
  );
}

/**
 * Implements hook_field_validate().
 */
function properties_field_validate($entity_type, $entity, $field, $instance, $langcode, $items, &$errors) {

}

/**
 * Implements hook_field_is_empty().
 */
function properties_field_is_empty($item, $field) {
  return empty($item['attribute']);
}

/**
 * Implements hook_field_formatter_info().
 */
function properties_field_formatter_info() {
  return array(
    'properties_formatter' => array(
      'label' => t('Default'),
      'field types' => array('properties'),
    ),
  );
}

/**
 * Implements hook_field_widget_info().
 */
function properties_field_widget_info() {
    return array(
    'properties_table' => array(
      'label' => t('Properties table'),
      'field types' => array('properties'),
      'settings' => array(),
      'behaviors' => array(
        'multiple values' => FIELD_BEHAVIOR_DEFAULT,
        'default value' => FIELD_BEHAVIOR_DEFAULT,
      ),
    ),
  );
}

/**
 * Implements hook_field_widet_form().
 */
function properties_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  $element['attribute'] = array(
    '#type' => 'textfield',
    '#title' => t('Attribute'),
    '#default_value' => isset($items[$delta]['attribute']) ? $items[$delta]['attribute'] : '',
  );
  $element['value'] = array(
    '#type' => 'textfield',
    '#title' => t('Value'),
    '#default_value' => isset($items[$delta]['value']) ? $items[$delta]['value'] : '',
  );
  $element['category'] = array(
    '#type' => 'textfield',
    '#title' => t('Category'),
    '#default_value' => isset($items[$delta]['category']) ? $items[$delta]['category'] : '',
  );
  return $element;
}

/**
 * Implements hook_field_formatter_view().
 */
function properties_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();
  $items_by_category = array();
  foreach ($items as $item) {
    if (!isset($items_by_category[$item['category']])) {
      $items_by_category[$item['category']] = array();
    }
    $items_by_category[$item['category']][] = $item;
  }

  $i = 0;
  foreach ($items_by_category as $category => $items_in_category) {
    $element[0][$i++] = array('#markup' => '<h3>' . $category . '</h3>');
    foreach ($items_in_category as $item) {
      $element[0][$i++] = array('#markup' => '<p>' . $item['attribute'] . ': ' . $item['value'] . '</p>');
    }
  }
  return $element;
}

/**
 * Calls an API function.
 *
 * Additional arguments can be passed to the function, these will be forwarded
 * to the API implementation.
 *
 * @param $type
 *   API type, e.g. attribute or category.
 * @param $action
 *   Name of the API function, eg load, save, delete.
 */
function _properties__get_call($type, $action) {
  return variable_get('properties_api', 'properties_sql') . '_' . $type . '_' . $action;
}

/**
 * Save an attribute object.
 *
 * @param $attribute
 *   Attribute object.
 */
function properties_attribute_save($attribute) {
  $function_name = _properties_get_call('attribute', 'save');
  return $function_name($attribute);
}

/**
 * Delete an attribute.
 *
 * @param $attribute
 *   Attribute object.
 */
function properties_attribute_delete($attribute) {
  $function_name = _properties_get_call('attribute', 'delete');
  return $function_name($attribute);
}

/**
 * Load an attribute based on the name.
 *
 * @param $name
 *   Machine readable name of the attribute.
 */
function properties_attribute_load($name) {
  $function_name = _properties_get_call('attribute', 'load');
  return $function_name($name);
}

/**
 * Load multiple attributes based on their names.
 *
 * @param $names
 *   Array of machine readable name of the attributes.
 */
function properties_attribute_load_multiple($names = array()) {
  $function_name = _properties_get_call('attribute', 'load_multiple');
  return $function_name($names);

}

/**
 *Load a paged amount of attributes.
 * @param $per_page
 *   Number of attributes per page.
 */
function properties_attribute_load_paging($per_page) {
  $function_name = _properties_get_call('attribute', 'load_paging');
  return $function_name($per_page);
}

/**
 * Save an category object.
 *
 * @param $category
 *   Category object.
 */
function properties_category_save($category) {
  $function_name = _properties_get_call('category', 'save');
  return $function_name($category);
}

/**
 * Delete an category.
 *
 * @param $category
 *   Category object.
 */
function properties_category_delete($category) {
  $function_name = _properties_get_call('category', 'delete');
  return $function_name($category);
}

/**
 * Load an category based on the name.
 *
 * @param $name
 *   Machine readable name of the category.
 */
function properties_category_load($name) {
  $function_name = _properties_get_call('category', 'load');
  return $function_name($name);
}

/**
 * Load multiple categories based on their names.
 *
 * @param $names
 *   Array of machine readable name of the categories.
 */
function properties_category_load_multiple($names = array()) {
  $function_name = _properties_get_call('category', 'load_multiple');
  return $function_name($names);

}

/**
 *Load a paged amount of categories.
 * @param $per_page
 *   Number of categories per page.
 */
function properties_category_load_paging($per_page) {
  $function_name = _properties_get_call('category', 'load_paging');
  return $function_name($per_page);
}
