<?php
// $Id$


/**
 * Save an attribute object.
 *
 * @param $attribute
 *   Attribute object.
 */
function properties_sql_properties_attribute_save($attribute) {
  db_merge('properties_attribute')
    ->key(array('name' => $attribute->name))
    ->fields(array(
        'label' => $attribute->label,
    ))
    ->execute();
}

/**
 * Delete an attribute.
 *
 * @param $attribute
 *   Attribute object.
 */
function properties_sql_properties_attribute_delete($attribute) {
  $num_deleted = db_delete('properties_attribute')
  ->condition('name', $attribute->name)
  ->execute();
}

/**
 * Load an attribute based on the name.
 *
 * @param $name
 *   Machine readable name of the attribute.
 */
function properties_sql_properties_attribute_load($name) {
  return reset(properties_sql_properties_attribute_load_multiple(array($name)));
}

/**
 * Load multiple attributes based on their names.
 *
 * @param $names
 *   Array of machine readable name of the attributes.
 */
function properties_sql_properties_attribute_load_multiple($names = array()) {
  $result = db_query("SELECT * FROM {properties_attribute} WHERE name in (:names)", array(':names' => $names));
  return $result->fetchAllAssoc('name');
}

/**
 *Load a paged amount of attributes.
 * @param $per_page
 *   Number of attributes per page.
 */
function properties_sql_properties_attribute_load_paging($per_page, array $options = array()) {
  $query = db_select('properties_attribute','pa')->extend('PagerDefault')
    ->fields('pa')
    ->limit($per_page);

  if (!empty($options['search'])) {
    $query->condition(db_or()
      ->condition('name', $options['search'] . '%', 'LIKE')
      ->condition('label', $options['search'] . '%', 'LIKE')
    );
  }
  return $query
    ->execute()
    ->fetchAllAssoc('name');
}

/**
 * Save an category object.
 *
 * @param $category
 *   Category object.
 */
function properties_sql_properties_category_save($category) {
  db_merge('properties_category')
    ->key(array('name' => $category->name))
    ->fields(array(
        'label' => $category->label,
    ))
    ->execute();

  // First, remove all existing attribute connections.
  db_delete('properties_category_attribute')
    ->condition('category_name', $category->name)
    ->execute();

  $insert = db_insert('properties_category_attribute')
    ->fields(array('category_name', 'attribute_name','weight'));
  foreach ($category->attributes as $attribute) {
    $insert->values(array(
      'category_name' => $category->name,
      'attribute_name' => $attribute->name,
      'weight' => $attribute->weight,
    ));
  }
  $insert->execute();
}

/**
 * Delete an category.
 *
 * @param $category
 *   Category object.
 */
function properties_sql_properties_category_delete($category) {
  db_delete('properties_category')
  ->condition('name', $category->name)
  ->execute();

  db_delete('properties_category_attribute')
    ->condition('category_name', $category->name)
    ->execute();
}

/**
 * Load an category based on the name.
 *
 * @param $name
 *   Machine readable name of the category.
 */
function properties_sql_properties_category_load($name) {
  return reset(properties_sql_properties_category_load_multiple(array($name)));
}

/**
 * Load multiple categories based on their names.
 *
 * @param $names
 *   Array of machine readable name of the categories.
 */
function properties_sql_properties_category_load_multiple($names = array()) {
  $result = db_query("SELECT * FROM {properties_category} WHERE name in (:categories)", array(':categories' => $names));
  $categories = $result->fetchAllAssoc('name');
  foreach($categories as $category) {
    $category->attributes = array();
  }
  $result = db_query("SELECT pa.* pac.weight FROM {properties_category_attribute} pac INNER JOIN {properties_attribute} pa ON pac.attribute_name = pa.name WHERE category_name in (:categories)", array(':categories' => $names));
  foreach ($result as $attribute) {
    $categories[$attribute->category_name]->attributes[$attribute->name] = $attribute;
  }
  return $categories;
}

/**
 *Load a paged amount of categories.
 * @param $per_page
 *   Number of categories per page.
 */
function properties_sql_properties_category_load_paging($per_page, array $options = array()) {
  $query = db_select('properties_category','pc')->extend('PagerDefault')
    ->fields('pc')
    ->limit($per_page);

  if (!empty($options['search'])) {
    $query->condition(db_or()
      ->condition('name', $options['search'] . '%', 'LIKE')
      ->condition('label', $options['search'] . '%', 'LIKE')
    );
  }
  return $query
    ->execute()
    ->fetchAllAssoc('name');
}
